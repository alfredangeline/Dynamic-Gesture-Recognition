from Lib.dataloader import DataLoader
from Lib.utils import mkdirs
from Lib.resnet_model import Resnet3DBuilder
from Lib.HistoryGraph import HistoryGraph
import Lib.image as img

import os

from keras.optimizers import SGD
from keras.callbacks import ModelCheckpoint

from math import ceil

target_size = (64, 96)
nb_frame = 32
skip = 1
batch_size = 64
channel = 3 # RGB
input_shape = (nb_frame,)+ target_size + (channel,);
nb_classes = 27 # 27 Gesture

data_root = os.getcwd()


path_videos = os.path.join(data_root, 'Videos')
path_labels = os.path.join(data_root, 'jester-v1-labels.csv')
path_train = os.path.join(data_root, 'jester-v1-train.csv')
path_validation = os.path.join(data_root,'jester-v1-validation.csv')
path_test = os.path.join(data_root, 'jester-v1-test.csv')

model_name = 'resnet_3d_model'
path_model = os.path.join(data_root, 'Model', model_name)

workers = 8 #number of thread generated by batches
use_multiprocessing = False
max_queue_size = 20 #internal training queue size


data = DataLoader(path_videos, path_labels, path_train, path_validation)

mkdirs(path_model, 0o755)
mkdirs(os.path.join(path_model, "graphs"), 0o755)

gen = img.ImageDataGenerator()
gen_train = gen.flow_video_from_dataframe(data.train_df, path_videos, path_classes=path_labels,
                x_col='video_id', y_col='label', target_size=target_size, batch_size=batch_size,
                skip=skip, has_ext=True)


gen_validation = gen.flow_video_from_dataframe(data.validation_df, path_videos, path_classes=path_labels,
                x_col='video_id', y_col='label', target_size=target_size, batch_size=batch_size,
                skip=skip, has_ext=True)

resnet_model = Resnet3DBuilder.build_resnet_101(input_shape, nb_classes, drop_rate=0.5)
optimizer = SGD(lr=0.01, momentum=0.9,decay=0.0001,nesterov=False)
resnet_model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])
model_file = os.path.join(path_model, 'resnetmodel.hdf5')

model_checkpointer = ModelCheckpoint(model_file, monitor='val_acc', verbose=1, save_best_only=True, mode='max')

history_graph = HistoryGraph(model_path_name=os.path.join(path_model, 'graphs'))

nb_sample_train = data.train_df['video_id'].size
nb_sample_val = data.validation_df['video_id'].size

resnet_model.fit_generator(generator=gen_train,
                            steps_per_epoch=ceil(nb_sample_train/batch_size),
                            epochs=100,validation_data=gen_validation,
                            validation_steps=30, shuffle=True, verbose=1,
                            workers=workers,max_queue_size=max_queue_size,
                            use_multiprocessing=use_multiprocessing,
                            callbacks=[model_checkpointer, history_graph])
